const mongoose = require('mongoose');
const validator = require('validator');
const bcrypt = require('bcryptjs');
const jwt = require('jsonwebtoken');
const crypto = require('crypto');

const userSchema = new mongoose.Schema({
    name: {
        type: String,
        required: [true, 'Please enter your name.']
    },
    email: {
        type: String,
        required: [true, 'Please enter your email address.'],
        unique: true,
        validate: [validator.isEmail, 'Please enter a valid email address.'],
    },
    role: {
        type: String,
        enum: {
            values: ['user', 'employer'],
            message: 'Please select your correct role.'
        },
        default: 'user',
    },
    password: {
        type: String,
        required: [true, 'Please enter password for your account.'],
        minLength: [6, 'Your password must be at least 6 characters long'],
        select: false
    },
    createdAt: {
        type: Date,
        default: Date.now
    },
    //for resetting passwords
    resetPasswordToken: String,
    resetPasswordExpire: Date,
},
    {
        toJSON: { virtuals: true },
        toObject: { virtuals: true }
    }
);

userSchema.pre('save', async function (next) {

    if (!this.isModified('password')) {
        next();
    }

    //10 is recommended salt length to generate hash
    this.password = await bcrypt.hash(this.password, 10);
});

//Return JSON Web Token
userSchema.methods.getJwtToken = function () {
    return jwt.sign({ id: this._id }, process.env.JWT_SECRET, { expiresIn: process.env.JWT_EXPIRE_TIME });
}

//compare user entered password with password in the database
userSchema.methods.checkPassword = async function (enteredPassword) {
    return await bcrypt.compare(enteredPassword, this.password);
}

//Generate Password Reset Token
//Hashing the reset token for storage in DB, but returning the actual token generated by the crypto package.
userSchema.methods.getResetPasswordToken = function () {
    //Generate token
    const resetToken = crypto.randomBytes(20).toString('hex');

    //Hash and set to resetPasswordToken
    //createHash takes an algo for hashing as first input. Using sha256
    this.resetPasswordToken = crypto.createHash('sha256').update(resetToken).digest('hex');

    //Set token expiry time
    this.resetPasswordExpire = Date.now() + 30 * 60 * 1000; //30 mins

    return resetToken;
}

// Show all jobs created by a user using virtuals
userSchema.virtual('jobsPublished', {
    ref: 'Job',
    localField: '_id',
    foreignField: 'user',
    justOne: false
});

module.exports = mongoose.model('User', userSchema)